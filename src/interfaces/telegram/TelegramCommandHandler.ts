import {TelegramMessage} from "../../domain/entities/TelegramMessage";
import {TelegramCallbackDataEnum} from "../../shared/types/TelegramCallbackData.types";
import {AbstractTelegramHandler} from "./AbstractTelegramHandler";
import {User} from "../../domain/entities/User";

export class TelegramCommandHandler extends AbstractTelegramHandler {
    public async start(message: TelegramMessage) {
        let user = await this
            .userRepository
            .findByTelegramId(message.getUser().getId());

        if (!user) {
            const newUser = User.create({
                id: 0,
                telegram_user_id: message.getUser().getId(),
                telegram_username: message.getUser().getUsername(),
                notifications_enabled: false,
            });

            await this.userRepository.save(newUser)
            await this.showMainMenuForNewUser(message);
            return;
        }

        const mainMenu = await this.showMainMenu(message);

        if (mainMenu) {
            await this.sendMessage(
                message.getChatId(),
                mainMenu?.text,
                mainMenu.button,
            );
        }
    }

    private generateWelcomeMessage(username: string) {
        return `üëã –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ, ${username}, –¥–æ CryptoSignals!

üéØ –¶–µ–π –±–æ—Ç –Ω–∞–¥—Å–∏–ª–∞—î —Å–∏–≥–Ω–∞–ª–∏ –¥–ª—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ç–µ—Ö–Ω—ñ—á–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É.

üìã –î–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏:
1Ô∏è‚É£ –û–±–µ—Ä—ñ—Ç—å –≤–∞–ª—é—Ç–Ω—ñ –ø–∞—Ä–∏
2Ô∏è‚É£ –ù–∞–ª–∞—à—Ç—É–π—Ç–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è  
3Ô∏è‚É£ –û—Ç—Ä–∏–º—É–π—Ç–µ —Å–∏–≥–Ω–∞–ª–∏!`;
    }

    private async showMainMenuForNewUser(message: TelegramMessage) {
        const text = this.generateWelcomeMessage(message.getUser().getUsername());
        const options = {
            reply_markup: {
                inline_keyboard: [[{
                    text: 'üöÄ –†–æ–∑–ø–æ—á–∞—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è',
                    callback_data: TelegramCallbackDataEnum.SETTINGS_NEW_USER,
                }]],
            },
        };

        await this.bot?.sendMessage(message.getChatId(), text, options);
    }
}
