const axios = require('axios');
const config = require('./config');

class TelegramBot {
    constructor() {
        this.botToken = config.telegram.botToken;
        this.chatId = config.telegram.chatId;
        this.baseUrl = `https://api.telegram.org/bot${this.botToken}`;
    }

    formatSignal(signal) {
        const emoji = signal.direction === 'SHORT' ? 'üî¥' : 'üü¢';
        const time = new Date(signal.timestamp).toLocaleTimeString('uk-UA', {
            timeZone: 'UTC',
            hour12: false
        });

        const reasoningText = signal.reasoning
            .map(reason => this.formatReason(reason))
            .map(reason => `‚Ä¢ ${reason}`)
            .join('\n');

        const riskReward = this.calculateRiskReward(signal);

        return `
${emoji} <b>${signal.direction} –°–ò–ì–ù–ê–õ</b> - SOL/USDT
‚è∞ ${time} UTC | 15m TF

üí∞ <b>–í–•–Ü–î:</b> $${signal.entry.toFixed(2)}
üõë <b>–°–¢–û–ü:</b> $${signal.stopLoss.toFixed(2)}

üéØ <b>–¶–Ü–õ–Ü:</b>
TP1: $${signal.targets[0].toFixed(2)} (30%)
TP2: $${signal.targets[1].toFixed(2)} (40%)  
TP3: $${signal.targets[2].toFixed(2)} (30%)

üìä <b>–ê–ù–ê–õ–Ü–ó:</b>
${reasoningText}

‚öñÔ∏è R/R: 1:${riskReward} | üéØ –í–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å: ${signal.confidence.toFixed(1)}/10
                    `
            .trim();
    }

    formatReason(reason) {
        const reasonMap = {
            priceAtResistance: '–¶—ñ–Ω–∞ –±—ñ–ª—è EMA7 –æ–ø–æ—Ä—É',
            rsiNeutral: 'RSI –≤ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ñ–π –∑–æ–Ω—ñ',
            macdBearish: 'MACD –≤–µ–¥–º–µ–∂–∏–π —Å–∏–≥–Ω–∞–ª',
            volumeConfirmation: '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–±\'—î–º–æ–º',
            bearishCandle: '–í–µ–¥–º–µ–∂–∞ —Å–≤—ñ—á–∫–∞',
            belowMediumTrend: '–¶—ñ–Ω–∞ –ø—ñ–¥ EMA14',
            nearBBUpper: '–ë—ñ–ª—è –≤–µ—Ä—Ö–Ω—å–æ—ó Bollinger Band',
            rsiOversold: 'RSI –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω—ñ—Å—Ç—å',
            macdBullish: 'MACD –±–∏—á–∞—á–∏–π —Å–∏–≥–Ω–∞–ª',
            bullishCandle: '–ë–∏—á–∞ —Å–≤—ñ—á–∫–∞',
            aboveMediumTrend: '–¶—ñ–Ω–∞ –Ω–∞–¥ EMA14',
            nearBBLower: '–ë—ñ–ª—è –Ω–∏–∂–Ω—å–æ—ó Bollinger Band',
            bounceFromSupport: '–í—ñ–¥—Å–∫–æ–∫ –≤—ñ–¥ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏'
        };

        return reasonMap[reason] || reason;
    }

    calculateRiskReward(signal) {
        const risk = Math.abs(signal.entry - signal.stopLoss);
        const reward = Math.abs(signal.targets[1] - signal.entry); // –î—Ä—É–≥–∞ —Ü—ñ–ª—å
        return (reward / risk).toFixed(1);
    }

    async sendMessage(text) {
        try {
            const response = await axios.post(`${this.baseUrl}/sendMessage`, {
                chat_id: this.chatId,
                text: text,
                parse_mode: 'HTML'
            });

            if (response.data.ok) {
                console.log('‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ');
                return true;
            } else {
                console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ Telegram:', response.data.description);
                return false;
            }
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏:', error.message);
            return false;
        }
    }

    async sendSignal(signal) {
        const message = this.formatSignal(signal);
        return await this.sendMessage(message);
    }
}

module.exports = TelegramBot;
